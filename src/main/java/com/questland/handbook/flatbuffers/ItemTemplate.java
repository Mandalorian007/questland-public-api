package com.questland.handbook.flatbuffers;// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.*;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class ItemTemplate extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static ItemTemplate getRootAsItemTemplate(ByteBuffer _bb) { return getRootAsItemTemplate(_bb, new ItemTemplate()); }
  public static ItemTemplate getRootAsItemTemplate(ByteBuffer _bb, ItemTemplate obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ItemTemplate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long t() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public String n() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public byte s() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public byte q() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public int i() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int i2() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean val() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int g() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean isSend() { int o = __offset(20); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int p() { int o = __offset(22); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String d() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer dInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  public boolean hid() { int o = __offset(26); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int ord() { int o = __offset(28); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public long set() { int o = __offset(30); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public int iSd() { int o = __offset(32); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int prvw() { int o = __offset(34); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean isUchest() { int o = __offset(36); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int uchestRoll() { int o = __offset(38); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int ip() { int o = __offset(40); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean si() { int o = __offset(42); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int rm() { int o = __offset(44); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int pskls(int j) { int o = __offset(46); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int psklsLength() { int o = __offset(46); return o != 0 ? __vector_len(o) : 0; }
  public IntVector psklsVector() { return psklsVector(new IntVector()); }
  public IntVector psklsVector(IntVector obj) { int o = __offset(46); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer psklsAsByteBuffer() { return __vector_as_bytebuffer(46, 4); }
  public ByteBuffer psklsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 4); }
  public int statsDmg() { int o = __offset(48); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int statsDmgInc() { int o = __offset(50); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int statsDef() { int o = __offset(52); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int statsDefInc() { int o = __offset(54); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int statsHp() { int o = __offset(56); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int statsHpInc() { int o = __offset(58); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int statsMagic() { int o = __offset(60); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int statsMagicInc() { int o = __offset(62); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public Talent talent() { return talent(new Talent()); }
  public Talent talent(Talent obj) { int o = __offset(64); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Link links(int j) { return links(new Link(), j); }
  public Link links(Link obj, int j) { int o = __offset(66); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int linksLength() { int o = __offset(66); return o != 0 ? __vector_len(o) : 0; }
  public Link.Vector linksVector() { return linksVector(new Link.Vector()); }
  public Link.Vector linksVector(Link.Vector obj) { int o = __offset(66); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public int lvl() { int o = __offset(68); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int req() { int o = __offset(70); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public long ritem() { int o = __offset(72); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public byte ueffN() { int o = __offset(74); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public int ueffP() { int o = __offset(76); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int ueffC() { int o = __offset(78); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public byte ueffT() { int o = __offset(80); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public int previewGold() { int o = __offset(82); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int previewPremium() { int o = __offset(84); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean previewGuaranteed() { int o = __offset(86); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public long previewItemsIds(int j) { int o = __offset(88); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int previewItemsIdsLength() { int o = __offset(88); return o != 0 ? __vector_len(o) : 0; }
  public IntVector previewItemsIdsVector() { return previewItemsIdsVector(new IntVector()); }
  public IntVector previewItemsIdsVector(IntVector obj) { int o = __offset(88); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer previewItemsIdsAsByteBuffer() { return __vector_as_bytebuffer(88, 4); }
  public ByteBuffer previewItemsIdsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 88, 4); }
  public long previewItemsAmount(int j) { int o = __offset(90); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int previewItemsAmountLength() { int o = __offset(90); return o != 0 ? __vector_len(o) : 0; }
  public IntVector previewItemsAmountVector() { return previewItemsAmountVector(new IntVector()); }
  public IntVector previewItemsAmountVector(IntVector obj) { int o = __offset(90); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer previewItemsAmountAsByteBuffer() { return __vector_as_bytebuffer(90, 4); }
  public ByteBuffer previewItemsAmountInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 90, 4); }
  public boolean bannerS() { int o = __offset(92); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public byte bannerP() { int o = __offset(94); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public String bannerC() { int o = __offset(96); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer bannerCAsByteBuffer() { return __vector_as_bytebuffer(96, 1); }
  public ByteBuffer bannerCInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 96, 1); }
  public int bannerO() { int o = __offset(98); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int bannerGId(int j) { int o = __offset(100); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int bannerGIdLength() { int o = __offset(100); return o != 0 ? __vector_len(o) : 0; }
  public IntVector bannerGIdVector() { return bannerGIdVector(new IntVector()); }
  public IntVector bannerGIdVector(IntVector obj) { int o = __offset(100); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer bannerGIdAsByteBuffer() { return __vector_as_bytebuffer(100, 4); }
  public ByteBuffer bannerGIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 100, 4); }
  public String bannerGName(int j) { int o = __offset(102); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int bannerGNameLength() { int o = __offset(102); return o != 0 ? __vector_len(o) : 0; }
  public StringVector bannerGNameVector() { return bannerGNameVector(new StringVector()); }
  public StringVector bannerGNameVector(StringVector obj) { int o = __offset(102); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public LootChancesGroup lootChances(int j) { return lootChances(new LootChancesGroup(), j); }
  public LootChancesGroup lootChances(LootChancesGroup obj, int j) { int o = __offset(104); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int lootChancesLength() { int o = __offset(104); return o != 0 ? __vector_len(o) : 0; }
  public LootChancesGroup.Vector lootChancesVector() { return lootChancesVector(new LootChancesGroup.Vector()); }
  public LootChancesGroup.Vector lootChancesVector(LootChancesGroup.Vector obj) { int o = __offset(104); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public int awakenItemId() { int o = __offset(106); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int rawGraphicId() { int o = __offset(108); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int extractCost() { int o = __offset(110); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean isGearShard() { int o = __offset(112); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int reqGearShardAmount() { int o = __offset(114); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean autoOpen() { int o = __offset(116); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean isHidden() { int o = __offset(118); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int craftTabId() { int o = __offset(120); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean dnsti() { int o = __offset(122); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createItemTemplate(FlatBufferBuilder builder,
      long t,
      int nOffset,
      byte s,
      byte q,
      int i,
      int i2,
      boolean val,
      int g,
      boolean is_send,
      int p,
      int dOffset,
      boolean hid,
      int ord,
      long set,
      int i_sd,
      int prvw,
      boolean is_uchest,
      int uchest_roll,
      int ip,
      boolean si,
      int rm,
      int psklsOffset,
      int stats_dmg,
      int stats_dmg_inc,
      int stats_def,
      int stats_def_inc,
      int stats_hp,
      int stats_hp_inc,
      int stats_magic,
      int stats_magic_inc,
      int talentOffset,
      int linksOffset,
      int lvl,
      int req,
      long ritem,
      byte ueff_n,
      int ueff_p,
      int ueff_c,
      byte ueff_t,
      int preview_gold,
      int preview_premium,
      boolean preview_guaranteed,
      int preview_items_idsOffset,
      int preview_items_amountOffset,
      boolean banner_s,
      byte banner_p,
      int banner_cOffset,
      int banner_o,
      int banner_g_idOffset,
      int banner_g_nameOffset,
      int loot_chancesOffset,
      int awaken_item_id,
      int raw_graphic_id,
      int extract_cost,
      boolean is_gear_shard,
      int req_gear_shard_amount,
      boolean auto_open,
      boolean is_hidden,
      int craft_tab_id,
      boolean dnsti) {
    builder.startTable(60);
    ItemTemplate.addCraftTabId(builder, craft_tab_id);
    ItemTemplate.addReqGearShardAmount(builder, req_gear_shard_amount);
    ItemTemplate.addExtractCost(builder, extract_cost);
    ItemTemplate.addRawGraphicId(builder, raw_graphic_id);
    ItemTemplate.addAwakenItemId(builder, awaken_item_id);
    ItemTemplate.addLootChances(builder, loot_chancesOffset);
    ItemTemplate.addBannerGName(builder, banner_g_nameOffset);
    ItemTemplate.addBannerGId(builder, banner_g_idOffset);
    ItemTemplate.addBannerO(builder, banner_o);
    ItemTemplate.addBannerC(builder, banner_cOffset);
    ItemTemplate.addPreviewItemsAmount(builder, preview_items_amountOffset);
    ItemTemplate.addPreviewItemsIds(builder, preview_items_idsOffset);
    ItemTemplate.addPreviewPremium(builder, preview_premium);
    ItemTemplate.addPreviewGold(builder, preview_gold);
    ItemTemplate.addUeffC(builder, ueff_c);
    ItemTemplate.addUeffP(builder, ueff_p);
    ItemTemplate.addRitem(builder, ritem);
    ItemTemplate.addReq(builder, req);
    ItemTemplate.addLvl(builder, lvl);
    ItemTemplate.addLinks(builder, linksOffset);
    ItemTemplate.addTalent(builder, talentOffset);
    ItemTemplate.addStatsMagicInc(builder, stats_magic_inc);
    ItemTemplate.addStatsMagic(builder, stats_magic);
    ItemTemplate.addStatsHpInc(builder, stats_hp_inc);
    ItemTemplate.addStatsHp(builder, stats_hp);
    ItemTemplate.addStatsDefInc(builder, stats_def_inc);
    ItemTemplate.addStatsDef(builder, stats_def);
    ItemTemplate.addStatsDmgInc(builder, stats_dmg_inc);
    ItemTemplate.addStatsDmg(builder, stats_dmg);
    ItemTemplate.addPskls(builder, psklsOffset);
    ItemTemplate.addRm(builder, rm);
    ItemTemplate.addIp(builder, ip);
    ItemTemplate.addUchestRoll(builder, uchest_roll);
    ItemTemplate.addPrvw(builder, prvw);
    ItemTemplate.addISd(builder, i_sd);
    ItemTemplate.addSet(builder, set);
    ItemTemplate.addOrd(builder, ord);
    ItemTemplate.addD(builder, dOffset);
    ItemTemplate.addP(builder, p);
    ItemTemplate.addG(builder, g);
    ItemTemplate.addI2(builder, i2);
    ItemTemplate.addI(builder, i);
    ItemTemplate.addN(builder, nOffset);
    ItemTemplate.addT(builder, t);
    ItemTemplate.addDnsti(builder, dnsti);
    ItemTemplate.addIsHidden(builder, is_hidden);
    ItemTemplate.addAutoOpen(builder, auto_open);
    ItemTemplate.addIsGearShard(builder, is_gear_shard);
    ItemTemplate.addBannerP(builder, banner_p);
    ItemTemplate.addBannerS(builder, banner_s);
    ItemTemplate.addPreviewGuaranteed(builder, preview_guaranteed);
    ItemTemplate.addUeffT(builder, ueff_t);
    ItemTemplate.addUeffN(builder, ueff_n);
    ItemTemplate.addSi(builder, si);
    ItemTemplate.addIsUchest(builder, is_uchest);
    ItemTemplate.addHid(builder, hid);
    ItemTemplate.addIsSend(builder, is_send);
    ItemTemplate.addVal(builder, val);
    ItemTemplate.addQ(builder, q);
    ItemTemplate.addS(builder, s);
    return ItemTemplate.endItemTemplate(builder);
  }

  public static void startItemTemplate(FlatBufferBuilder builder) { builder.startTable(60); }
  public static void addT(FlatBufferBuilder builder, long t) { builder.addInt(0, (int)t, (int)0L); }
  public static void addN(FlatBufferBuilder builder, int nOffset) { builder.addOffset(1, nOffset, 0); }
  public static void addS(FlatBufferBuilder builder, byte s) { builder.addByte(2, s, 0); }
  public static void addQ(FlatBufferBuilder builder, byte q) { builder.addByte(3, q, 0); }
  public static void addI(FlatBufferBuilder builder, int i) { builder.addInt(4, i, 0); }
  public static void addI2(FlatBufferBuilder builder, int i2) { builder.addInt(5, i2, 0); }
  public static void addVal(FlatBufferBuilder builder, boolean val) { builder.addBoolean(6, val, false); }
  public static void addG(FlatBufferBuilder builder, int g) { builder.addInt(7, g, 0); }
  public static void addIsSend(FlatBufferBuilder builder, boolean isSend) { builder.addBoolean(8, isSend, false); }
  public static void addP(FlatBufferBuilder builder, int p) { builder.addInt(9, p, 0); }
  public static void addD(FlatBufferBuilder builder, int dOffset) { builder.addOffset(10, dOffset, 0); }
  public static void addHid(FlatBufferBuilder builder, boolean hid) { builder.addBoolean(11, hid, false); }
  public static void addOrd(FlatBufferBuilder builder, int ord) { builder.addInt(12, ord, 0); }
  public static void addSet(FlatBufferBuilder builder, long set) { builder.addInt(13, (int)set, (int)0L); }
  public static void addISd(FlatBufferBuilder builder, int iSd) { builder.addInt(14, iSd, 0); }
  public static void addPrvw(FlatBufferBuilder builder, int prvw) { builder.addInt(15, prvw, 0); }
  public static void addIsUchest(FlatBufferBuilder builder, boolean isUchest) { builder.addBoolean(16, isUchest, false); }
  public static void addUchestRoll(FlatBufferBuilder builder, int uchestRoll) { builder.addInt(17, uchestRoll, 0); }
  public static void addIp(FlatBufferBuilder builder, int ip) { builder.addInt(18, ip, 0); }
  public static void addSi(FlatBufferBuilder builder, boolean si) { builder.addBoolean(19, si, false); }
  public static void addRm(FlatBufferBuilder builder, int rm) { builder.addInt(20, rm, 0); }
  public static void addPskls(FlatBufferBuilder builder, int psklsOffset) { builder.addOffset(21, psklsOffset, 0); }
  public static int createPsklsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startPsklsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addStatsDmg(FlatBufferBuilder builder, int statsDmg) { builder.addInt(22, statsDmg, 0); }
  public static void addStatsDmgInc(FlatBufferBuilder builder, int statsDmgInc) { builder.addInt(23, statsDmgInc, 0); }
  public static void addStatsDef(FlatBufferBuilder builder, int statsDef) { builder.addInt(24, statsDef, 0); }
  public static void addStatsDefInc(FlatBufferBuilder builder, int statsDefInc) { builder.addInt(25, statsDefInc, 0); }
  public static void addStatsHp(FlatBufferBuilder builder, int statsHp) { builder.addInt(26, statsHp, 0); }
  public static void addStatsHpInc(FlatBufferBuilder builder, int statsHpInc) { builder.addInt(27, statsHpInc, 0); }
  public static void addStatsMagic(FlatBufferBuilder builder, int statsMagic) { builder.addInt(28, statsMagic, 0); }
  public static void addStatsMagicInc(FlatBufferBuilder builder, int statsMagicInc) { builder.addInt(29, statsMagicInc, 0); }
  public static void addTalent(FlatBufferBuilder builder, int talentOffset) { builder.addOffset(30, talentOffset, 0); }
  public static void addLinks(FlatBufferBuilder builder, int linksOffset) { builder.addOffset(31, linksOffset, 0); }
  public static int createLinksVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startLinksVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addLvl(FlatBufferBuilder builder, int lvl) { builder.addInt(32, lvl, 0); }
  public static void addReq(FlatBufferBuilder builder, int req) { builder.addInt(33, req, 0); }
  public static void addRitem(FlatBufferBuilder builder, long ritem) { builder.addInt(34, (int)ritem, (int)0L); }
  public static void addUeffN(FlatBufferBuilder builder, byte ueffN) { builder.addByte(35, ueffN, 0); }
  public static void addUeffP(FlatBufferBuilder builder, int ueffP) { builder.addInt(36, ueffP, 0); }
  public static void addUeffC(FlatBufferBuilder builder, int ueffC) { builder.addInt(37, ueffC, 0); }
  public static void addUeffT(FlatBufferBuilder builder, byte ueffT) { builder.addByte(38, ueffT, 0); }
  public static void addPreviewGold(FlatBufferBuilder builder, int previewGold) { builder.addInt(39, previewGold, 0); }
  public static void addPreviewPremium(FlatBufferBuilder builder, int previewPremium) { builder.addInt(40, previewPremium, 0); }
  public static void addPreviewGuaranteed(FlatBufferBuilder builder, boolean previewGuaranteed) { builder.addBoolean(41, previewGuaranteed, false); }
  public static void addPreviewItemsIds(FlatBufferBuilder builder, int previewItemsIdsOffset) { builder.addOffset(42, previewItemsIdsOffset, 0); }
  public static int createPreviewItemsIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startPreviewItemsIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addPreviewItemsAmount(FlatBufferBuilder builder, int previewItemsAmountOffset) { builder.addOffset(43, previewItemsAmountOffset, 0); }
  public static int createPreviewItemsAmountVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startPreviewItemsAmountVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addBannerS(FlatBufferBuilder builder, boolean bannerS) { builder.addBoolean(44, bannerS, false); }
  public static void addBannerP(FlatBufferBuilder builder, byte bannerP) { builder.addByte(45, bannerP, 0); }
  public static void addBannerC(FlatBufferBuilder builder, int bannerCOffset) { builder.addOffset(46, bannerCOffset, 0); }
  public static void addBannerO(FlatBufferBuilder builder, int bannerO) { builder.addInt(47, bannerO, 0); }
  public static void addBannerGId(FlatBufferBuilder builder, int bannerGIdOffset) { builder.addOffset(48, bannerGIdOffset, 0); }
  public static int createBannerGIdVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startBannerGIdVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addBannerGName(FlatBufferBuilder builder, int bannerGNameOffset) { builder.addOffset(49, bannerGNameOffset, 0); }
  public static int createBannerGNameVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBannerGNameVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addLootChances(FlatBufferBuilder builder, int lootChancesOffset) { builder.addOffset(50, lootChancesOffset, 0); }
  public static int createLootChancesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startLootChancesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAwakenItemId(FlatBufferBuilder builder, int awakenItemId) { builder.addInt(51, awakenItemId, 0); }
  public static void addRawGraphicId(FlatBufferBuilder builder, int rawGraphicId) { builder.addInt(52, rawGraphicId, 0); }
  public static void addExtractCost(FlatBufferBuilder builder, int extractCost) { builder.addInt(53, extractCost, 0); }
  public static void addIsGearShard(FlatBufferBuilder builder, boolean isGearShard) { builder.addBoolean(54, isGearShard, false); }
  public static void addReqGearShardAmount(FlatBufferBuilder builder, int reqGearShardAmount) { builder.addInt(55, reqGearShardAmount, 0); }
  public static void addAutoOpen(FlatBufferBuilder builder, boolean autoOpen) { builder.addBoolean(56, autoOpen, false); }
  public static void addIsHidden(FlatBufferBuilder builder, boolean isHidden) { builder.addBoolean(57, isHidden, false); }
  public static void addCraftTabId(FlatBufferBuilder builder, int craftTabId) { builder.addInt(58, craftTabId, 0); }
  public static void addDnsti(FlatBufferBuilder builder, boolean dnsti) { builder.addBoolean(59, dnsti, false); }
  public static int endItemTemplate(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ItemTemplate get(int j) { return get(new ItemTemplate(), j); }
    public ItemTemplate get(ItemTemplate obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

