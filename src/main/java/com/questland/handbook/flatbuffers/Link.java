package com.questland.handbook.flatbuffers;// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.*;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Link extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static Link getRootAsLink(ByteBuffer _bb) { return getRootAsLink(_bb, new Link()); }
  public static Link getRootAsLink(ByteBuffer _bb, Link obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Link __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte e() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public float p() { int o = __offset(6); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public long i(int j) { int o = __offset(8); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int iLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public IntVector iVector() { return iVector(new IntVector()); }
  public IntVector iVector(IntVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer iAsByteBuffer() { return __vector_as_bytebuffer(8, 4); }
  public ByteBuffer iInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 4); }

  public static int createLink(FlatBufferBuilder builder,
      byte e,
      float p,
      int iOffset) {
    builder.startTable(3);
    Link.addI(builder, iOffset);
    Link.addP(builder, p);
    Link.addE(builder, e);
    return Link.endLink(builder);
  }

  public static void startLink(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addE(FlatBufferBuilder builder, byte e) { builder.addByte(0, e, 0); }
  public static void addP(FlatBufferBuilder builder, float p) { builder.addFloat(1, p, 0.0f); }
  public static void addI(FlatBufferBuilder builder, int iOffset) { builder.addOffset(2, iOffset, 0); }
  public static int createIVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startIVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endLink(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Link get(int j) { return get(new Link(), j); }
    public Link get(Link obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

